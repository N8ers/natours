what I will learn in this lesson

-best ways to perform basic reset using universal selector
using the universal selector (*) you can add margin and padding
see more in the css file around line 10
the box-size property being border-box; it changes box model so border and padding are not added to total width or height - so they go away!
line height "vh" - at every point the height of the box should be the vh% of what is seen... i think the height is 95% of the view port height in the headers changes
background size cover - tries to fill the whole space that it covers

how to set project-wide fonr definitions

how to clip parts of elements using clip-path

*** A note on inline, block, and inline-block

inline elements: 
-respect L&R margins/padding but NOT top and btm
-CANNOT have a width and height set
-allow elements to sit on L&R 

block elements:
-respect above
-forces a line break after the block elements
-aquires full-width UNLESS the width is defined

inline-block elements:
-allow other elements to sit L&R 
-respects top & btm margin/padding
-respects height and width

*** A note on z-index
z-index relates when stacked/overlapping eachother
by defult the element that comes last in markup covers the previous
by giving a larger z-index to one property it will cover those with lower z-indexs
IF a child element has a z-index is is only relative to the parent element
and cannot overlap an element outside of the parent with a higher z-index

z-index only works with elements that have a position 
(either relative absolute or fixed)

***THREE PILLARS of WRITTING GOOD HTML & CSS***
I. Responsive Design
a website that works well across all devices and screen sizes
II. Maintainable & Scalable Code
III. Web Performance

What happens to CSS when we load up a page?
Loads HTML -> Parses HTML -> DOM
                          -> Load CSS -> Parse CSS (cascade & CSS values) -> css object model (CSSOM)
DOM & CSSOM -> render tree -> website rendering -> final rendered website

How CSS is Parsed 

quick termnology review: 

selector          ->      .my-class {
decloration block ->           
declaration       ->      propery: declared value;
                          }

Cascade - process of combining different stylesheets and resolving conflicts
between different CSS rules and declarations, when more than one rules
applies to a certain element.

SPECIFICITY;
1) Inline styles (in html)         
2) IDs 
3) classes/pseudo-classes, attributes       
4) elements, psudo-elements
Same level of specificty? -the last one wins!
universal selector * has no specificity value - so anything after takes precedent

How CSS Calues are prossed
rem px % vw
1) declared value - author declorations
2) cascaed value - after cascade
3) specified value - defaulting fi no cascaed value
4) computed value - calculated relative calues to absolute
5) used value - final calculations based on layout
6) actual value - browser and device restrictions

How units are converted from relative to absolute (px)
% (fonts) - if 150% that means it'll be 150% of the parent element 
% (lengths) - x% of parents computed width

em (fonts) - x * parent (computed font-size)
em (lengths) - x * current element (computed font-size)
rem - 'root em' uses the ROOT font size (x * root = computed font-size)

vh - 1vh = 1% of viewport height
vw - 1vw = 1% of viewport width

inheritance; a way of propogating property values from parents to children
every CSS property must have a value 

converting px to rem;
why use rem instead of px? 

The box model - 
fill area: area that gets filled with background color or background image
this is everything BUT the margin 
if width/height is not specified, the box model will use the content to determin size

total width = right border + right padding + specified width + left padding + left border
total height = top border + top padding + specified height + bottom padding + bottom border

box-sizing: border-box; using the border-box, the height and width of the entire box
including padding and border NOT just for the content area 

block-level boxes; examples display: flex/list-item/table 
-Elements formatted visually as blocks
-100% of parent's width
-vertically, one after another
-box-model applies as showed 

inline boxes; examples display: inline
-content is distrubted in lines (only occupies space content needs)
-occupies only content's space
-no line-breaks 
-no heights and widths they won't work
- can only control paddings and margins only horizontal (left-right)

inline-block boxes; examples: inline-block
-acts like inline boxes but work as block level inside
-occupies only content's space
-no line-breaks-box-model applies as shown

positioning schemes: 
normal flow; (position: relative)
-default positioning scheme
-not floated;
-not absolutely positioned
-siimply, elements are laid out according to their natural order in the Code

floats; (float: left/ float-right)
-element is removed from the normal flow
-text and inline elements will wrap around the floated element
-the container will not adjust its height to the element
-pushes element to the left or right until it touches the edge of it's contating box

absolute; (absolute / fixed)
-element is removed from the normal flow
-no impact on surrounding content or elements
-we use css properties; top,btm,left,right to offset the element from its 
relatiely positioned container

Stacking Context; 
what determins the order of elements rendered on page
the most widley know is z-index but there are others

CSS Architecture, Components and BEM
Think - about the layout of your webpage or web app before writting code 
        (use *component-driven design
        divide the page into modular building blocks that make up interfaces 
        held together by layout of the page
        re-usable across a project, and between different projects)
Build - your layout in HTML and CSS with consistent structure for naming classes
        there are many ways to skin this cat; object-oriented css/SMACSS/BEM
        BEM - block-element-modifier
        .block{}                        .recipe{}
        .block__element {}              .recipe__stat{}
        .block__element--modifier{}     .recipe__stat-name{}
        let's say you've got btns, you want rules for all btns, 
        some need to be more specific so you change them as you go deeper
Architext - create a logical architecture for your css with files and folders
        there are many ways to skin this cat; ITCSS/SMACSS/7-1 pattern
        7-1 pattern 
        7 diferent folders for partial Sass files, 
        1 main Sass file to import all other files into
        a compiled CSS stylesheet
        (7 folders; base/ components/ layout/ pages/ themes/ abstracts/ vendors/)
    
SASS NOTES

Sass is a css preprocessor, an extension of CSS that adds power and elegance 
to the basic language
Features of Sass
    variables: for reusable values such as colors, font-sizes, spacing, ect
    nesting: allows us to write less code
    operators: for mathmatical operations right inside of CSS
    partials and imports: to write CSS in different files and importing them all into one single file;
    mixins: to write reusable pieces of CSS code
    functions: similar to mixins, but they produce a value that can be used
    extends: make different selectors inherit declarations that are common to all of them
    control directives: for writting complex code using conditionals and loops

Syntax;
Sass vs SCSS 
Sass - no curly braces or semicolons
SCSS (sassy CSS) - looks just like CSS and it's what we'll use

variables; 
make them -- $primary-color: #f8ed69 
then use them -- background-color: $color-primary;
nesting?
dont forget about your &, it writes out the selector at that current point


When using float - it colapses height SO any background you have will go away
How do we fix this? CLEARFIX
.clearfix::after {
        content: "";
        clear: both;
        display: table;         }

FOR AN EXAMPLE VISIT THE CODEPEN BELOW
https://codepen.io/n8ers/pen/oMzjzv?editors=1100

mixin;
a reusable piece of code - think of it as a varable 
set it up like this
@mixin clearfix {
        property: declared value;
}
then call it somewhere else with
@include clearfix;
you can add arguments too!

@mixin style-link-text($col) { color: $col; }
include style-link-text($color-text-light);

YOU CAN USE FUNCTIONS TOO!!!!!!!

@function divide ($a, $b) {
        @return $a / $b;
}

nav {
        margin: divide(60, 2) * 1px;
}

OKAY so this isn't a realistic example, but it's a good idea of how it works
ps the reason we are multiplying by 1px is to give the result a unit

extends - write a place holders and then and have other slectors 
put styles in there then other styles use it

why use an extend instead of a mixin? 
I'm not really sure - I don't super understand them and they don't 
seem to be 100% nessessary

Command line

on windows ls is dir 

NPM Packages: Let's Install SASS Locally!
node.js - allows devs to write and run JS applications on the server
Devs started using noed.js to writes tools to help with local web dev
NPM - command line interface that lalows devs to install and manage 
packages on local computers - such as tools/libraries/frameworks 

How to install Sass;
command line... (or intigrated terminal in VS)
to check if node is installed "node -v"
make package.json "npm init"
get Sass "npm install node-sass --save-dev"
npm install jquery (if you want it)

OKAY let's talk about compiling scss;
open your package.json file
inside the "scripts" connect files 
ex:
 "scripts": {
    "compile:sass": "node-sass sass/main.scss css/style.css -w"
  }
node-sass is telling what file type
sass/main.scss is telling what file to use
css/style.css is telling where the compiled sass/main.scss file should go
this flag says "watch" 
how do you auto reload?
npm package - "npm install live-server -g" (the g is for global)

go in command line call 'live-server'

Implementing 7-1 CSS Architecture with Sass
so make a folder and name it _base.scss THEN it auto corrolates to the folder
but don't forget we still need to @import on the main.scss 

-Responive design-
1) fluid gids and layouts; to allow content to easilt adapt to the current viewport width 
used to browse the website. Uses % rather than px for all layout-related lengths.

2) flexible/responsive images; Images behave differently than text content, 
and so we need to ensure that they also adapt nicely to the current viewport.

3) media queries; to change styles on certain viewpoert widths (breakpoints), 
allowing us to create different version of our website for different widths

Float Layouts - a bunch of boxes side by side - still used in modern websites 
because it still WORKS in all websites

Flexbox - think of it as left to right 

CSS Grid - a great way of setting the whole 2 demential thing up!

How to architect and build a simple grid systems!
a grid is a design system 

each column will be called a row

width vs max-width
width; 
max-width; if enough space it will have the width specified, 
but if not then it will be less than that

margin: 0 auto; 
center a block element inside another block element! 
IT's gotta be in a block!!!

gutter: space between rows