@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem) rotate(0deg); }
  60% {
    transform: rotate(180deg); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

*,
*::after,
*::before {
  /*by selecting the psudo elements we keep things from getting cattywompus*/
  margin: 0;
  padding: 0;
  /* The width and height properties (and max/min properties) 
    includes content, padding & border */
  box-sizing: inherit;
  /* this forces everything inside to take it's parents box-sizing */ }

html {
  /* font-size: 10px; */
  /*why are we doing this? to set a root font-size.
    why 10px? because then 1rem = 10px - it's just easier to calculate */
  font-size: 62.5%;
  /* why this number? default font-size is 16px 
    but we want the root font size value to be equel to 10px
    so... 10/16 =.625 = 62.5% */
  /* NOW we're changing from px value, becuse px removes the availibility for 
    those with bad eye sight to change the defaule font-size */
  /* REMs ARE NOT SUPPORTED BELOW EX 9! YOUR SITE WILL NOT WORK */
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.o {
  letter-spacing: -.5em; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    /*why are we using block level elements? because they take up the width that they have available AND add line breaks after and before them */
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* animation-timing-function: ease-out;  --there are more of these!*/
    /* animation-iteration-count: 3; */
    /* animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation-name: moveInRight;
    animation-duration: 1s; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  /* how to make a background linear gradient */
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.btn {
  /* sudo class!!! to style elements under a special condition */
  /* after sudo element - behind button
MUST HAVE CONTNENT AND DISPLAY attributes
sudo elements are treated like the child of the btn
so the height/width are 100% of the btn's height/width
*/
  /* an after sudo element, only when btn is hovered */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    /* transitions MUST be on initial states */
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.5) scaleY(1.6);
      /* how it scales on X/Y axis */
      /*changes the size of an element - in this case 2x larger than before*/
      /* NOW we want to add a transition
            TRANSITIONS MUST be set on initial state (in this case btn::after 
            {transition: all .4s} */
      opacity: 0;
      /* after animation it disapears */ }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /*z-index defines the position of elements if one is on top of another*/
    transition: all .4s; }
  .btn--animated {
    /* animation-name: moveInBottom;
    animation-duration: 1.5s; 
    the above can be shortened to below*/
    animation: moveInBottom .5s ease-out .75s;
    /* animation: name duration type delay */
    animation-fill-mode: backwards;
    /* automatically apply style of 0% before animation starts
    this is important because we dont want it visible before the delay kicks in */ }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all .2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) /3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) /4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /*if you look the background doesn't cover the whole page */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /*the reasoning for this order is first to last in order of stacking .. so green first, then jpg*/
  background-size: cover;
  /*this has some responsive design to it - don't forget about this! */
  background-position: top;
  /*ensures that if you resize the image it stays sticky at the top so it doesn't zoom in in weird ways!!! */
  position: relative;
  /*this is set up for the logo-box*/
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*the first and second # mean x and y refer to the axess - the order of numbers is clockwise starting upper left */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
    /* where do these pixles start? from the parent element (header) */ }
  .header__logo {
    height: 3.5rem;
    /* the width will be automatically set up by browser (it would be the same if we only uncluded the width) */ }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*the above is in relation to the parent element */
    transform: translate(-50%, -50%);
    /* okay so the above is pretty cool
        top and left indicate 
        transform/translate - this works because 
        it no longer gets pinged by the parent element,
        but by the element itself!!! */
    text-align: center;
    /*this will effect all nested stuff! That's why btn is aligned */ }

.logo:hover {
  animation: moveInRight 10s ease-out; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

/* The 0% is where we start
100% is where we end - we can also have anything inbetween!
why transform: translateX()? 
because we want it coming in on the X axis and Left to Right

ALSO - look at class heading-primary-main & heading-primary-sub
we need to assign it the animation-name and animation-duration!
these are the only two properties NESSESSARY 
for an animation to work - but there are lots of others!

notice a shake at the end of an animation? check out 
   backface-visibility: hidden; under .heading-primary
   it determins of the back side of the element is visible 
   it comes in handy for rotating animations 
*/
